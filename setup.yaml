

6)=> folder structure

# docker
# |-Dockerfile
# logs
# |
# nginx
# |-http.conf
# |-https.conf
# public
# |
# script
# |
# scr
# |-config
#   |-config.ts
# |-constant
#   |-application.ts
#   |-responseMessage.ts
# |-controller
#   |-apiController.ts
# |-middleware
#   |-globalErrorHandler.ts
# |-model   
# |-router
#   |-apiRouter.ts
# |-service
# |-types
# |-util
#   |-errorObject.ts
#   |-httpError.ts
#   |-httpResponse.ts
#   |-quicker.ts
# |-view
# |-app.ts
# |-server.ts  <- entry file
# test
# |
# |
# .env.development
# |
# .env.example
# |
# .env.production
# |
# .gitignore
# |=node_modules
# |=dist
# |=.env.production
# |=.env.development
# ecosystem.config.js
# |
# nodemon.json
# |
# README.md


7)=> COMMIT LINT

# npm install @commitlint/cli @commitlint/config-conventional -D
# creating a commit-msg
# creating a commit.config.ts

8)=> EsLint

# npm install --save-dev eslint @eslint/js @types/eslint__js typescript typescript-eslint
# |in package.json
# script->
    # "lint": "eslint .",
    # "lint:fix": "eslint . --fix"


  # "lint-staged":{
  #   "*.ts":[
  #     "npm run lint:fix"
  #   ]

9)=> prettier setup

# npm install --save-dev --save-exact prettier
# root  .pretiierrc

# with eslint
# npm install --save-dev eslint-config-prettier


# writ in pckjson script
    # "format:check": "prettier . --check",
    # "format:fix": "prettier . --fix",